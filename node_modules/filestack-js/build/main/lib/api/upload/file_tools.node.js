"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFile = void 0;
var tslib_1 = require("tslib");
/*
 * Copyright (c) 2019 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var file_1 = require("./file");
var utils_1 = require("./../../utils");
var filestack_error_1 = require("./../../../filestack_error");
var file_tools_1 = require("./file_tools");
/**
 * Check if file is buffer
 *
 * @node
 * @param input
 */
var isFileBuffer = function (input) { return Buffer.isBuffer(input); };
/**
 * Check if input is a valid file path
 *
 * @node
 * @param input
 */
var isFilePath = function (input) { return require('fs').existsSync(input); };
/**
 * Check if file is base64 string
 *
 * @param input
 */
var isFileBase = function (input) {
    if (typeof input !== 'string') {
        return false;
    }
    if (input.indexOf('base64') > -1 && file_tools_1.base64Regexp.test(input)) {
        input = input.match(file_tools_1.base64Regexp).pop();
    }
    if (Buffer.from(input, 'base64').toString('base64') === input) {
        return true;
    }
    return false;
};
/**
 * Accepts Buffer or filepath or base64 string
 *
 * @node
 * @param {*} inputFile
 * @returns {Promise<File>}
 */
var getFile = function (input, sanitizeOptions, mimetype) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var filename, path_1, matches, mime_1;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if ((0, file_tools_1.isFileNamed)(input)) {
                    filename = input.name;
                    input = input.file;
                }
                if (isFilePath(input)) {
                    path_1 = input;
                    return [2 /*return*/, new Promise(function (resolve, reject) {
                            require('fs').readFile(path_1, function (err, buffer) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                                var mime;
                                return tslib_1.__generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (err) {
                                                return [2 /*return*/, reject(err)];
                                            }
                                            if (!filename) {
                                                filename = require && require('path').basename(path_1);
                                            }
                                            return [4 /*yield*/, (0, utils_1.getMimetype)(buffer, filename)];
                                        case 1:
                                            mime = _a.sent();
                                            return [2 /*return*/, resolve(new file_1.File({
                                                    name: filename,
                                                    size: buffer.byteLength,
                                                    type: mimetype || mime,
                                                    slice: function (start, end) { return Promise.resolve(buffer.slice(start, end)); },
                                                }, sanitizeOptions))];
                                    }
                                });
                            }); });
                        })];
                }
                if (isFileBase(input)) {
                    matches = input.match(file_tools_1.base64Regexp);
                    if (matches && matches.length === 2) {
                        input = Buffer.from(matches[2], 'base64');
                    }
                    else {
                        input = Buffer.from(input, 'base64');
                    }
                }
                if (!isFileBuffer(input)) return [3 /*break*/, 2];
                return [4 /*yield*/, (0, utils_1.getMimetype)(input, filename)];
            case 1:
                mime_1 = _a.sent();
                return [2 /*return*/, Promise.resolve(new file_1.File({
                        name: filename,
                        size: input.byteLength,
                        type: mimetype || mime_1,
                        // @ts-ignore
                        slice: function (start, end) { return Promise.resolve(input.slice(start, end)); },
                    }, sanitizeOptions))];
            case 2: return [2 /*return*/, Promise.reject(new filestack_error_1.FilestackError('Unsupported input file type'))];
        }
    });
}); };
exports.getFile = getFile;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
