"use strict";
/*
 * Copyright (c) 2018 by Filestack
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpAdapter = void 0;
var tslib_1 = require("tslib");
var url = tslib_1.__importStar(require("url"));
var zlib = tslib_1.__importStar(require("zlib"));
var debug_1 = tslib_1.__importDefault(require("debug"));
var utils_1 = require("../../utils");
var Stream = tslib_1.__importStar(require("stream"));
var utils = tslib_1.__importStar(require("../utils"));
var helpers_1 = require("./../helpers");
var error_1 = require("../error");
var types_1 = require("./../types");
var HTTPS_REGEXP = /https:?/;
var HTTP_CHUNK_SIZE = 16 * 1024;
var MAX_REDIRECTS = 10;
var CANCEL_CLEAR = "FsCleanMemory";
var debug = (0, debug_1.default)('fs:request:http');
/**
 * Writable stream thats overwrap http request for progress event
 *
 * @class HttpWritableStream
 * @extends {Stream.Writable}
 */
var HttpWritableStream = /** @class */ (function (_super) {
    tslib_1.__extends(HttpWritableStream, _super);
    function HttpWritableStream(req, opts) {
        if (opts === void 0) { opts = {}; }
        var _this = _super.call(this, opts) || this;
        _this.request = req;
        req.once('drain', function () { return _this.emit('drain'); });
        return _this;
    }
    HttpWritableStream.prototype._write = function (chunk, encoding, cb) {
        this.request.write(chunk, encoding, cb);
    };
    HttpWritableStream.prototype.end = function (chunk, encoding, cb) {
        _super.prototype.end.call(this, chunk, encoding, cb);
        return this;
    };
    HttpWritableStream.prototype._final = function (cb) {
        this.request.end();
        cb();
    };
    return HttpWritableStream;
}(Stream.Writable));
/**
 * Node http request class
 *
 * @export
 * @class HttpAdapter
 * @implements {AdapterInterface}
 */
var HttpAdapter = /** @class */ (function () {
    function HttpAdapter() {
        this.redirectHoops = 0;
        this.redirectPaths = [];
        /**
         * Monitor and emit progress event if needed
         *
         * @private
         * @memberof HttpAdapter
         */
        this.getProgressMonitor = function (config, total) {
            var loaded = 0;
            var progress = new Stream.Transform();
            progress._transform = function (chunk, encoding, cb) {
                if (typeof config.onProgress === 'function' && [types_1.FsHttpMethod.POST, types_1.FsHttpMethod.PUT].indexOf(config.method) > -1) {
                    loaded += chunk.length;
                    config.onProgress({
                        lengthComputable: true,
                        loaded: loaded,
                        total: total,
                    });
                }
                cb(null, chunk);
            };
            return progress;
        };
    }
    /**
     * do request based on configuration
     *
     * @param {FsRequestOptions} config
     * @returns
     * @memberof HttpAdapter
     */
    HttpAdapter.prototype.request = function (config) {
        var _this = this;
        // if this option is unspecified set it by default
        if (typeof config.filestackHeaders === 'undefined') {
            config.filestackHeaders = true;
        }
        config.headers = (0, helpers_1.normalizeHeaders)(config.headers);
        var _a = (0, helpers_1.prepareData)(config), data = _a.data, headers = _a.headers;
        headers = (0, helpers_1.set)(headers, 'user-agent', "filestack-request/".concat((0, utils_1.getVersion)()));
        // for now we are not using streams
        if (data) {
            debug('Request data %O', data);
            if (!Buffer.isBuffer(data)) {
                if (!utils.isString(data)) {
                    return Promise.reject(new error_1.FsRequestError('Data must be a string, JSON or a Buffer', config));
                }
                data = Buffer.from(data, 'utf-8');
            }
            headers = (0, helpers_1.set)(headers, 'content-length', data.length, true);
        }
        // HTTP basic authentication
        var auth;
        if (config.auth) {
            if (!config.auth.username || config.auth.username.length === 0) {
                return Promise.reject(new error_1.FsRequestError("Basic auth: username is required ".concat(config.auth), config));
            }
            auth = "".concat(config.auth.username, ":").concat(config.auth.password);
        }
        // Parse url
        var parsed = url.parse(config.url);
        // try to add default https protocol
        if (!parsed.protocol) {
            parsed = url.parse("https://".concat(config.url));
        }
        /* istanbul ignore next: just be sure that the host is parsed correctly, not needed to test */
        if (!parsed.host) {
            return Promise.reject(new error_1.FsRequestError("Cannot parse provided url ".concat(config.url), config));
        }
        // normalize auth header
        if (auth && headers.Authorization) {
            delete headers.Authorization;
        }
        var isHttpsRequest = HTTPS_REGEXP.test(parsed.protocol);
        var agent = isHttpsRequest ? require('https') : require('http');
        var options = {
            path: (0, helpers_1.combineURL)(parsed.path, config.params),
            host: parsed.host,
            port: parsed.port,
            protocol: parsed.protocol,
            method: config.method.toUpperCase(),
            headers: headers,
            agent: new agent.Agent(),
            auth: auth,
        };
        debug('Starting %s request with options %O', isHttpsRequest ? 'https' : 'http', options);
        return new Promise(function (resolve, reject) {
            var req;
            var cancelListener;
            if (config.cancelToken) {
                cancelListener = config.cancelToken.on('cancel', function (reason) {
                    // cleanup handler
                    cancelListener = null;
                    // do nothing if promise is resolved by system
                    if (reason && reason.message === CANCEL_CLEAR) {
                        return;
                    }
                    /* istanbul ignore next: if request is done cancel token should not throw any error */
                    if (req) {
                        req.abort();
                        req = null;
                    }
                    debug('Request canceled by user %s, config: %O', reason, config);
                    return reject(new error_1.FsRequestError("Request aborted. Reason: ".concat(reason), config, null, error_1.FsRequestErrorCode.ABORTED));
                });
            }
            req = agent.request(options, function (res) {
                /* istanbul ignore next: just be sure that response will not be called after request is aborted */
                if (!req || req.aborted) {
                    return reject(new error_1.FsRequestError('Request aborted', config));
                }
                var stream = res;
                debug('Response statusCode: %d, Response Headers: %O', res.statusCode, res.headers);
                var compressHeaders = res.headers['content-encoding'];
                if (compressHeaders && compressHeaders.length && ['gzip', 'compress', 'deflate'].some(function (v) { return compressHeaders.indexOf(v) > -1; })) {
                    // add the unzipper to the body stream processing pipeline
                    stream = res.statusCode === 204 ? stream : stream.pipe(zlib.createUnzip());
                    // remove the content-encoding in order to not confuse downstream operations
                    delete res.headers['content-encoding'];
                }
                var response = {
                    status: res.statusCode,
                    statusText: res.statusMessage,
                    headers: res.headers,
                    config: config,
                    data: {},
                };
                // we need to follow redirect so make same request with new location
                if ([301, 302].indexOf(res.statusCode) > -1) {
                    debug('Redirect received %s', res.statusCode);
                    if (_this.redirectHoops >= MAX_REDIRECTS) {
                        return reject(new error_1.FsRequestError("Max redirects (".concat(_this.redirectHoops, ") reached. Exiting"), config, response, error_1.FsRequestErrorCode.REDIRECT));
                    }
                    var url_1 = res.headers['location'];
                    if (!url_1 || url_1.length === 0) {
                        return reject(new error_1.FsRequestError("Redirect header location not found", config, response, error_1.FsRequestErrorCode.REDIRECT));
                    }
                    if (_this.redirectPaths.indexOf(url_1) > -1) {
                        return reject(new error_1.FsRequestError("Redirect loop detected at url ".concat(url_1), config, response, error_1.FsRequestErrorCode.REDIRECT));
                    }
                    _this.redirectPaths.push(url_1);
                    _this.redirectHoops++;
                    // free resources
                    res = undefined;
                    req = undefined;
                    debug('Redirecting request to %s (hoop-count: %d)', url_1, _this.redirectHoops);
                    return resolve(_this.request(Object.assign({}, config, { url: url_1 })));
                }
                var responseBuffer = [];
                stream.on('data', function (chunk) { return responseBuffer.push(chunk); });
                /* istanbul ignore next: its hard to test socket events with jest and nock - tested manually */
                stream.on('error', function (err) {
                    res = undefined;
                    req = undefined;
                    responseBuffer = undefined;
                    debug('Request error: Aborted %O', err);
                    if (req.aborted) {
                        return;
                    }
                    // clear cancel token to avoid memory leak
                    if (cancelListener) {
                        config.cancelToken.removeListener(cancelListener);
                    }
                    return reject(new error_1.FsRequestError(err.message, config, null, error_1.FsRequestErrorCode.NETWORK));
                });
                stream.on('end', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                    return tslib_1.__generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                // clear cancel token to avoid memory leak
                                if (cancelListener) {
                                    config.cancelToken.removeListener(cancelListener);
                                }
                                if (!(res.statusCode !== 204)) return [3 /*break*/, 2];
                                // prepare response
                                response.data = Buffer.concat(responseBuffer);
                                return [4 /*yield*/, (0, helpers_1.parseResponse)(response)];
                            case 1:
                                response = _a.sent();
                                return [3 /*break*/, 3];
                            case 2:
                                response.data = null;
                                _a.label = 3;
                            case 3:
                                // free resources
                                res = undefined;
                                req = undefined;
                                responseBuffer = undefined;
                                if (500 <= response.status && response.status <= 599) {
                                    // server error throw
                                    debug('Server error(5xx) - %O', response);
                                    return [2 /*return*/, reject(new error_1.FsRequestError("Server error ".concat(url), config, response, error_1.FsRequestErrorCode.SERVER))];
                                }
                                else if (400 <= response.status && response.status <= 499) {
                                    debug('Request error(4xx) - %O', response);
                                    return [2 /*return*/, reject(new error_1.FsRequestError("Request error ".concat(url), config, response, error_1.FsRequestErrorCode.REQUEST))];
                                }
                                debug('Request ends: %O', response);
                                return [2 /*return*/, resolve(response)];
                        }
                    });
                }); });
            });
            if (config.timeout) {
                req.setTimeout(config.timeout, function () {
                    req.abort();
                    if (cancelListener) {
                        config.cancelToken.removeListener(cancelListener);
                    }
                    return reject(new error_1.FsRequestError('Request timeout', config, null, error_1.FsRequestErrorCode.TIMEOUT));
                });
            }
            req.on('error', function (err) {
                if (cancelListener) {
                    config.cancelToken.removeListener(cancelListener);
                }
                if (!req || req.aborted) {
                    return;
                }
                debug('Request error: %s - %O', err, err.code);
                return reject(new error_1.FsRequestError("Request error: ".concat(err.code), config, null, error_1.FsRequestErrorCode.NETWORK));
            });
            if (Buffer.isBuffer(data) && ['POST', 'PUT'].indexOf(config.method) > -1) {
                return _this.bufferToChunks(data).pipe(_this.getProgressMonitor(config, data.length)).pipe(new HttpWritableStream(req));
            }
            req.end(data);
        });
    };
    /**
     * Convert buffer to stream
     *
     * @private
     * @param {*} buffer
     * @returns {Stream.Readable}
     * @memberof HttpAdapter
     */
    HttpAdapter.prototype.bufferToChunks = function (buffer) {
        var chunking = new Stream.Readable();
        var totalLength = buffer.length;
        var remainder = totalLength % HTTP_CHUNK_SIZE;
        var cutoff = totalLength - remainder;
        for (var i = 0; i < cutoff; i += HTTP_CHUNK_SIZE) {
            var chunk = buffer.slice(i, i + HTTP_CHUNK_SIZE);
            chunking.push(chunk);
        }
        if (remainder > 0) {
            var remainderBuffer = buffer.slice(-remainder);
            chunking.push(remainderBuffer);
        }
        chunking.push(null);
        return chunking;
    };
    return HttpAdapter;
}());
exports.HttpAdapter = HttpAdapter;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
