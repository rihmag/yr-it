"use strict";
/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.cleanUpCallbacks = exports.filterObject = exports.sanitizeName = exports.extensionToMime = exports.getMimetype = exports.uniqueId = exports.uniqueTime = exports.removeEmpty = exports.resolveHost = exports.resolveCdnUrl = void 0;
var tslib_1 = require("tslib");
var extensions_1 = require("./extensions");
var file_type_1 = require("file-type");
var isutf8_1 = tslib_1.__importDefault(require("isutf8"));
/**
 * Resolve cdn url based on handle type
 *
 * @private
 * @param session session object
 * @param handle file handle (hash, src://alias, url)
 */
var resolveCdnUrl = function (session, handle) {
    var cdnURL = session.urls.cdnUrl;
    if (handle && (handle.indexOf('src:') === 0 || handle.indexOf('http') === 0)) {
        if (!session.apikey) {
            throw new Error('Api key is required when storage alias is provided');
        }
        // apikey is required for alias or external sources call
        return "".concat(cdnURL, "/").concat(session.apikey);
    }
    return cdnURL;
};
exports.resolveCdnUrl = resolveCdnUrl;
/**
 * Resolve all urls with provided cnames
 *
 * @private
 * @param urls
 * @param cname
 */
var resolveHost = function (urls, cname) {
    if (!cname) {
        return urls;
    }
    var hosts = /filestackapi.com|filestackcontent.com/i;
    Object.keys(urls).forEach(function (key) {
        urls[key] = urls[key].replace(hosts, cname);
    });
    return urls;
};
exports.resolveHost = resolveHost;
/**
 * Removes empty options from object
 *
 * @private
 * @param obj
 */
var removeEmpty = function (obj) {
    var newObj = tslib_1.__assign({}, obj);
    Object.keys(newObj).forEach(function (k) { return !newObj[k] && typeof newObj[k] !== 'boolean' && delete newObj[k]; });
    return newObj;
};
exports.removeEmpty = removeEmpty;
/**
 * Returns unique time
 */
var last;
var uniqueTime = function () {
    var time = Date.now();
    last = time === last ? time + 1 : time;
    return last;
};
exports.uniqueTime = uniqueTime;
/**
 * Generates random string with provided length
 *
 * @param len
 */
var uniqueId = function (len) {
    if (len === void 0) { len = 10; }
    return new Array(len).join().replace(/(.|$)/g, function () { return ((Math.random() * 36) | 0).toString(36)[Math.random() < 0.5 ? 'toString' : 'toUpperCase'](); });
};
exports.uniqueId = uniqueId;
/**
 * Check if input is a svg
 *
 * @param {Uint8Array | Buffer} file
 * @returns {string} - mimetype
 */
var getMimetype = function (file, name) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var type, e_1, excludedMimetypes, mime_1;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                return [4 /*yield*/, (0, file_type_1.fromBuffer)(file)];
            case 1:
                type = _a.sent();
                return [3 /*break*/, 3];
            case 2:
                e_1 = _a.sent();
                console.warn('An exception occurred while processing the buffer:', e_1.message);
                return [3 /*break*/, 3];
            case 3:
                excludedMimetypes = ['text/plain', 'application/octet-stream', 'application/x-ms', 'application/x-msi', 'application/zip', 'audio/x-m4a'];
                if (type && excludedMimetypes.indexOf(type.mime) === -1) {
                    return [2 /*return*/, type.mime];
                }
                if (name && name.indexOf('.') > -1) {
                    mime_1 = (0, exports.extensionToMime)(name);
                    if (mime_1) {
                        return [2 /*return*/, mime_1];
                    }
                }
                try {
                    if ((0, isutf8_1.default)(file)) {
                        return [2 /*return*/, 'text/plain'];
                    }
                }
                catch (e) {
                    /* istanbul ignore next */
                    console.warn('Additional mimetype checks (text/plain) are currently not supported for browsers');
                }
                // this is only fallback, omit it in coverage
                /* istanbul ignore next */
                // if we cant find types by extensions and we have magic bytes fallback to it
                if (type) {
                    return [2 /*return*/, type.mime];
                }
                return [2 /*return*/, 'application/octet-stream'];
        }
    });
}); };
exports.getMimetype = getMimetype;
/**
 * Change extension to according mimetype using ext=>mimetype map
 *
 * @param ext - string
 * @return string|boolean
 */
var extensionToMime = function (ext) {
    if (!ext || ext.length === 0) {
        return;
    }
    if (ext.split('/').length === 2) {
        return ext;
    }
    if (ext.indexOf('.') > -1) {
        ext = ext.split('.').pop();
    }
    ext = ext.toLocaleLowerCase();
    var keys = Object.keys(extensions_1.ExtensionsMap);
    var mapLen = keys.length;
    for (var i = 0; i < mapLen; i++) {
        if (extensions_1.ExtensionsMap[keys[i]].indexOf(ext) > -1) {
            return keys[i];
        }
    }
    return;
};
exports.extensionToMime = extensionToMime;
/**
 * Sanitize file name
 *
 * @param name
 * @param {bool} options  - enable,disable sanitizer, default enabled
 * @param {string} options.replacement - replacement for sanitized chars defaults to "-"
 * @param {string[]} options.exclude - array with excluded chars default - `['\', '{', '}','|', '%', '`', '"', "'", '~', '[', ']', '#', '|', '^', '<', '>']`
 */
var sanitizeName = function (name, options) {
    if (options === void 0) { options = true; }
    if (typeof options === 'boolean' && !options) {
        return name;
    }
    var ext;
    var replacement = typeof options !== 'boolean' && options.replacement ? options.replacement : '-';
    var exclude = typeof options !== 'boolean' && options.exclude ? options.exclude : ['\\', '{', '}', '|', '%', '`', '"', "'", '~', '[', ']', '#', '|', '^', '<', '>'];
    if (!name || name.length === 0) {
        return 'undefined';
    }
    var fileParts = name.split('.');
    if (fileParts.length > 1) {
        ext = fileParts.pop();
    }
    return "".concat(fileParts
        .join('.')
        .split('')
        .map(function (char) { return (exclude.indexOf(char) > -1 ? replacement : char); })
        .join('')).concat(ext ? '.' + ext : '');
};
exports.sanitizeName = sanitizeName;
/**
 * Filter object to given fields
 *
 * @param toFilter
 * @param requiredFields
 */
var filterObject = function (toFilter, requiredFields) {
    if (!requiredFields || requiredFields.length === 0) {
        return toFilter;
    }
    if (Object.keys(toFilter).length === 0) {
        return toFilter;
    }
    return Object.keys(toFilter)
        .filter(function (f) { return requiredFields.indexOf(f) > -1; })
        .reduce(function (obj, key) {
        var _a;
        return (tslib_1.__assign(tslib_1.__assign({}, obj), (_a = {}, _a[key] = toFilter[key], _a)));
    }, {});
};
exports.filterObject = filterObject;
/**
 * Deep cleanup object from functions
 *
 * @param obj
 */
var cleanUpCallbacks = function (obj) {
    if (!obj || Object.keys(obj).length === 0) {
        return obj;
    }
    Object.keys(obj).forEach(function (k) {
        if (typeof obj[k] === 'function') {
            obj[k] = undefined;
        }
        if (obj[k] === Object(obj[k])) {
            obj[k] = (0, exports.cleanUpCallbacks)(obj[k]);
        }
    });
    return obj;
};
exports.cleanUpCallbacks = cleanUpCallbacks;
tslib_1.__exportStar(require("./index.node"), exports);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
